
//=======================================================
//  This code is generated by Terasic System Builder
//=======================================================

module BMP_display(


	//////////// CLOCK //////////
	input 		          		CLOCK2_50,
	input 		          		CLOCK3_50,
	input 		          		CLOCK4_50,
	input 		          		REF_CLK,

	
	//////////// KEY //////////
	input 						RST_n,	// this is KEY[0]

	//////////// LED //////////
	output		     [9:0]		LEDR,

	//////////// VGA //////////
	output		          		VGA_BLANK_N,
	output		     [7:0]		VGA_B,
	output		          		VGA_CLK,
	output		     [7:0]		VGA_G,
	output		          		VGA_HS,
	output		     [7:0]		VGA_R,
	output		          		VGA_SYNC_N,
	output		          		VGA_VS
);

  ////////////////////////////////////
  // internal nets for connections //
  //////////////////////////////////
  wire rst_n;						// synchronized global reset signal
  wire clk;							// 50MHz clock from PLL
  wire pll_locked;					// PLL is locked on reference clock
  wire [9:0] xpix;					// current X coordinate of VGA
  wire [8:0] ypix;					// current Y coordinate of VGA
  wire [18:0] raddr;				// address into videoMem for reads
  wire [8:0] rdata;					// 9-bit color
  wire [18:0] waddr;				// write address to videoMem
  wire [8:0] wdata;					// write data to videoMem
  wire [4:0] image_indx;
  wire [9:0] xloc;
  wire we;
  wire add_img,add_fnt;
  wire [5:0] fnt_indx;
  
  reg [18:0] count;					// generate a pulse on add_img
  
  ////////////////////////////////////////////////////////
  // Instantiate PLL to generate clk and 25MHz VGA_CLK //
  //////////////////////////////////////////////////////
  PLL iPLL(.refclk(REF_CLK), .rst(~RST_n),.outclk_0(clk),.outclk_1(VGA_CLK),
           .locked(pll_locked));
 
  /////////////////////////////////////
  // instantiate rst_n synchronizer //
  ///////////////////////////////////
  rst_synch iRST(.clk(clk),.RST_n(RST_n), .pll_locked(pll_locked), .rst_n(rst_n));


  //assign LEDR = 10'h3FF;
 
  ///////////////////////////////////////
  // Instantiate VGA Timing Generator //
  /////////////////////////////////////
  VGA_timing iVGATM(.clk25MHz(VGA_CLK), .rst_n(rst_n), .VGA_BLANK_N(VGA_BLANK_N),
                    .VGA_HS(VGA_HS),.VGA_SYNC_N(VGA_SYNC_N), .VGA_VS(VGA_VS), 
					.xpix(xpix), .ypix(ypix), .addr_lead(raddr));
					
  /////////////////////////////////////
  // Instantiate 9-bit video memory //
  ///////////////////////////////////
  videoMem(.clk(clk),.we(we),.waddr(waddr),.wdata(wdata),.raddr(raddr),.rdata(rdata));
  
  assign VGA_R = {rdata[8:6],5'b00000};
  assign VGA_G = {rdata[5:3],5'b00000};
  assign VGA_B = {rdata[2:0],5'b00000};
  
  //////////////////////////////////////////////
  // Instantiate Logic that determines pixel //
  // colors based on BMP placement          //
  ///////////////////////////////////////////					
  PlaceBMP(.clk(clk),.rst_n(rst_n),.add_fnt(add_fnt),.fnt_indx(fnt_indx),
           .add_img(add_img),.rem_img(1'b0),.image_indx(image_indx),
           .xloc(xloc),.yloc(9'h50),.waddr(waddr),.wdata(wdata),.we(we));

  ///////////////////////////////////////////////
  // What follows is a super cheese ball method
  // of writing a few characters and images
  // using the signals to PlaceBMP.  This would
  // best be done through memory mapping PlaceBMP
  // to the databus of your processor and using
  // your processor code to write images and characters
  ///////////////////////////////////////////////
  always @(posedge clk, negedge rst_n)
    if (!rst_n)
	  count <= 19'h00000;
	else if (~&count)
	  count <= count + 1;
	  
  assign add_fnt = (count==19'h00005) ? 1'b1 : 
                   (count==19'h01005) ? 1'b1 :
				   (count==19'h02005) ? 1'b1 :
				   (count==19'h03005) ? 1'b1 :
				   (count==19'h04005) ? 1'b1 :
				   (count==19'h05005) ? 1'b1 :
				   1'b0;
				   
  assign fnt_indx = (count==19'h00005) ? 6'd22 : // M
                   (count==19'h01005) ? 6'd36 :  // ' '
				   (count==19'h02005) ? 6'd31 :	 // V
				   (count==19'h03005) ? 6'd28 :	 // S
				   (count==19'h04005) ? 6'd36 :  // ' '
				   (count==19'h05005) ? 6'd11 :  // B 
				   1'b0;
				   
  assign add_img = ((count==19'h07000) || (count==19'h7FFFE)) ? 1'b1 : 1'b0;
  assign image_indx = (count[18]) ? 5'h02 : 5'h01;
  assign xloc = (count==19'h00005) ? 10'd256 :
                (count==19'h01005) ? 10'd269 :
				(count==19'h02005) ? 10'd282 :
				(count==19'h03005) ? 10'd295 :
				(count==19'h04005) ? 10'd308 :
				(count==19'h05005) ? 10'd321 :
                (count[18]) ? 10'h180 : 10'h40;
	
 endmodule
